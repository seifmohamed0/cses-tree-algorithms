#include <bits/stdc++.h>
#include <ext/numeric>

#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
typedef tree<
pair<int,int>,
null_type,
less<pair<int,int>>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
using namespace std;
#define go ios::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#define ll long long
typedef vector<vector<int>>vvi;
typedef complex<long double>Point;
const double Pi = acos(-1.0) , eps = 1e-8;
#define X real()
#define Y imag()
#define Angle(v) (atan2((v).Y , (v).X))
#define Length(v) ((long double)hypot((v).Y , (v).X))
#define Lengthsqr(v) (dot((v) , (v)))
const int mxn = 2e5+ 5, mod = 1e9 + 7, MOD = 1e9 + 7 , mod2 = 998244353;
int n , m , c[mxn] ,tim , st[mxn] , en[mxn] , g[mxn * 2];
vector<int>vi[mxn];
ll tre[mxn * 8];
void dfs(int node , int par){
	st[node] = ++tim;
	g[tim] = node;
	for(auto it : vi[node]){
		if(it != par){
			dfs(it , node);
		}
	}
	en[node] = ++tim;
}
void build(int p ,int l , int r){
	if(l == r){
		tre[p] = c[g[l]];
		return;
	}
	int mid = (l + r) / 2;
	build(2 * p , l , mid);
	build(2 * p + 1 , mid + 1 , r);
	tre[p] = tre[2 * p] + tre[2 * p + 1];
	return;
}
void update(int p , int l , int r , int node){
	if(l == r){
		tre[p] = c[g[node]];
		return;
	}
	int mid = (l + r) / 2;
	if(node <= mid)
		update(2 * p , l , mid , node);
	else update(2 * p + 1 , mid + 1 , r , node);
	tre[p] = tre[2*p] + tre[2*p+1];
	return;
}
ll qry(int p , int l , int r , int nl , int nr){
	if(nl <= l && nr >= r)
		return tre[p];
	if(nl > r || nr < l)
		return 0;
	int mid = (l + r) / 2;
	return qry(2 * p , l , mid , nl , nr) + qry(2 * p + 1 , mid + 1 , r , nl , nr);
}
void bingo(){
	cin>>n>>m;
	for(int i = 1; i <=n ; i++)
		cin>>c[i];
	for(int i = 0 ; i < n - 1; i++){
		int u , v;
		cin>>u>>v;
		vi[u].push_back(v);
		vi[v].push_back(u);
	}
	dfs(1 , 1);
	build(1 , 1 , tim);
	while(m--){
		int stat ;
		cin>>stat;
		if(stat == 1){
			int node , val;
			cin>>node>>val;
			c[node] = val;
			update(1 , 1 , tim , st[node]);
		}else{
			int node ;
			cin>>node;
			cout<<qry(1,1,tim,st[node],en[node])<<'\n';
		}
	}
}
int main() {
	go
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
//	freopen("output.out", "wt", stdout);
#endif
	//freopen("card.in", "rt", stdin);
	int t = 1;
	//cin>>t;
	while(t--){
		bingo();
	}
	return 0;
}

