#include <bits/stdc++.h>
#include <ext/numeric>
 
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
typedef tree<
pair<int,int>,
null_type,
less<pair<int,int>>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
using namespace std;
#define go ios::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#define ll long long
typedef vector<vector<int>>vvi;
typedef complex<long double>Point;
const double Pi = acos(-1.0) , eps = 1e-8;
#define X real()
#define Y imag()
#define Angle(v) (atan2((v).Y , (v).X))
#define Length(v) ((long double)hypot((v).Y , (v).X))
#define Lengthsqr(v) (dot((v) , (v)))
const int mxn = 1e6+ 5, mod = 1e9 + 7, MOD = 1e9 + 7 , mod2 = 998244353;
 
int n , mxdist[mxn] , ans[mxn];
vector<int>vi[mxn];
void dfs1(int node , int par){
	for(auto it : vi[node]){
		if(it != par){
			dfs1(it , node);
		}
	}
	for(auto it : vi[node]){
		if(it != par)
		mxdist[node] = max(mxdist[node] , mxdist[it] + 1);
	}
}
void dfs2(int node , int par , int outer = 0){
	ans[node] = max({outer , mxdist[node]});
	vector<array<int,2>>vec;
	for(auto it : vi[node]){
		if(it != par)
			vec.push_back({mxdist[it] , it});
	}
	sort(vec.rbegin() , vec.rend());
	if(vec.size() == 1){
		dfs2(vec[0][1] , node , outer + 1);
		return;
	}
	for(int i = 0 ;i < (int)vec.size() ; i++){
		int best = vec[i][1] != vec[0][1] ? vec[0][0] + 1 : vec[1][0] + 1;
		dfs2(vec[i][1] , node , max(best + 1 , outer + 1));
	}
}
void bingo(){
	cin>>n;
	for(int i = 0;i < n - 1 ;i++){
		int u , v;
		cin>>u>>v;
		vi[u].push_back(v);
		vi[v].push_back(u);
	}
	dfs1(1 , -1);
	dfs2(1 , -1);
	for(int i =1 ; i <=n ; i++)
		cout<<ans[i]<<" ";
}
int main() {
	go
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
//	freopen("output.out", "wt", stdout);
#endif
	//freopen("card.in", "rt", stdin);
	int t = 1;
	//cin>>t;
	while(t--){
		bingo();
	}
	return 0;
}
